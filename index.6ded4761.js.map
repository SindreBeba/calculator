{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-0b1970a844c6405e.js","src/calculator.js","src/button.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/decimal.js/decimal.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"72ed2bac6ded4761\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else if ('reload' in location) {\n        location.reload();\n      } else {\n        // Web extension context\n        var ext = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n        if (ext && ext.runtime && ext.runtime.reload) {\n          ext.runtime.reload();\n        }\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import { Button } from \"./button\";\nimport { Decimal } from \"decimal.js\";\n\n// Variables used to store calculator state\n\nlet selectedOperator;\nlet runningTotal = new Decimal(0);\nlet currentOperand = new Decimal(0);\nlet lastAction = Button.EQUALS;\n\nlet outputValue = \"0\";\n\n// HTML element constants\n\nconst output = document.querySelector(\".output\");\n\n// IO functions\n\nfunction writeOutput() {\n  if (outputValue.length > 13) {\n    if (Button.isInput(lastAction)) {\n      outputValue = outputValue.substr(0, 13);\n    } else {\n      clear();\n      outputValue = \"ERROR\";\n    }\n  }\n\n  output.innerText = outputValue;\n}\n\n// Calculator functions\n\nfunction handleNumber(inputValue) {\n  if (Button.isInput(lastAction)) {\n    if (outputValue === \"0\") {\n      outputValue = inputValue;\n    } else {\n      outputValue += inputValue;\n    }\n  } else if (Button.isOperator(lastAction)) {\n    outputValue = inputValue;\n  } else {\n    clear();\n    outputValue = inputValue;\n  }\n}\n\nfunction handleOperator(inputValue) {\n  if (Button.isInput(lastAction)) {\n    runningTotal = currentOperand;\n    currentOperand = new Decimal(outputValue);\n    execute();\n  }\n  selectedOperator = inputValue;\n}\n\nfunction clear() {\n  selectedOperator = undefined;\n  runningTotal = new Decimal(0);\n  currentOperand = new Decimal(0);\n  outputValue = \"0\";\n}\n\nfunction backspace() {\n  if (lastAction == Button.EQUALS) {\n    clear();\n  } else if (!Button.isInput(lastAction) || outputValue.length <= 1) {\n    outputValue = \"0\";\n  } else {\n    outputValue = outputValue.slice(0, -1);\n  }\n}\n\nfunction equals() {\n  if (Button.isOperator(lastAction)) {\n    return;\n  }\n  if (Button.isInput(lastAction)) {\n    currentOperand = new Decimal(outputValue);\n  }\n  execute();\n}\n\nfunction execute() {\n  switch (selectedOperator) {\n    case Button.DIVIDE:\n      runningTotal = runningTotal.dividedBy(currentOperand);\n      break;\n    case Button.MULTIPLY:\n      runningTotal = runningTotal.times(currentOperand);\n      break;\n    case Button.SUBTRACT:\n      runningTotal = runningTotal.minus(currentOperand);\n      break;\n    case Button.ADD:\n      runningTotal = runningTotal.plus(currentOperand);\n      break;\n    case undefined:\n      runningTotal = currentOperand;\n      break;\n    default:\n      alert(`Error: operator \"${selectedOperator}\" is not valid.`);\n      return;\n  }\n\n  outputValue = runningTotal.toString();\n}\n\n// Init\n\nfunction init() {\n  document.querySelector(\".calc\").addEventListener(\"click\", function (event) {\n    if (event.target.tagName === \"BUTTON\") {\n      buttonClicked(event.target.value);\n    }\n  });\n}\n\ninit();\n\nfunction buttonClicked(buttonValue) {\n  inputHandler(buttonValue);\n  writeOutput();\n  console.log(\n    `State after \"${buttonValue}\": operator: ${selectedOperator}, total: ${runningTotal.toString()}, operand: ${currentOperand.toString()}, last action: ${lastAction}`\n  );\n}\n\nfunction inputHandler(buttonValue) {\n  if (Button.isNumber(buttonValue)) {\n    handleNumber(buttonValue);\n  } else if (Button.isOperator(buttonValue)) {\n    handleOperator(buttonValue);\n  } else if (buttonValue == Button.CLEAR) {\n    clear();\n  } else if (buttonValue == Button.BACKSPACE) {\n    backspace();\n  } else if (buttonValue == Button.EQUALS) {\n    equals();\n  } else if (buttonValue == Button.DECIMAL) {\n    outputValue += \".\";\n  } else {\n    alert(`Error: operator \"${buttonValue}\" is not valid.`);\n    return;\n  }\n  lastAction = buttonValue;\n}\n","// Enum object for button tag values\nexport const Button = Object.freeze({\n  // Operators\n  ADD: \"add\",\n  SUBTRACT: \"subtract\",\n  MULTIPLY: \"multiply\",\n  DIVIDE: \"divide\",\n  // Other buttons\n  CLEAR: \"clear\",\n  BACKSPACE: \"back\",\n  EQUALS: \"equals\",\n  DECIMAL: \"decimal\",\n\n  isOperator(value) {\n    return [this.ADD, this.SUBTRACT, this.MULTIPLY, this.DIVIDE].includes(\n      value\n    );\n  },\n\n  isNumber(value) {\n    return value.length == 1 && !isNaN(parseInt(value));\n  },\n\n  isInput(value) {\n    return (\n      [this.BACKSPACE, this.DECIMAL].includes(value) || this.isNumber(value)\n    );\n  },\n});\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.3.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"names":[],"version":3,"file":"index.6ded4761.js.map","sourceRoot":"/__parcel_source_root/"}