{"mappings":"AAEA,IAAIA,iBACAC,aAAe,EACfC,eAAiB,EACjBC,WAAa,SAEbC,YAAc,GAIlB,MAAMC,OAASC,SAASC,cAAc,WAItC,SAASC,cAAcC,GACfC,MAAMC,SAASF,IACfG,eAAeH,GAEfI,aAAaJ,GAGjBK,cACAC,QAAQC,IAAI,gBAAgBP,iBAA0BT,4BAA4BC,0BAA0BC,gCAAgCC,cAGhJ,SAASW,cACDV,YAAYa,OAAS,KACF,WAAfd,WACAC,YAAcA,YAAYc,OAAO,EAAE,KAEnCC,QACAf,YAAc,UAItBC,OAAOe,UAAYhB,YAKvB,SAASS,aAAaJ,GAClB,OAAQN,YACJ,IAAK,SACmB,MAAhBC,YACAA,YAAcK,EAEdL,aAAeK,EAEnB,MACJ,IAAK,WACDL,YAAcK,EACd,MACJ,IAAK,SACDU,QACAf,YAAcK,EAItBN,WAAa,SAGjB,SAASS,eAAeH,GACpB,OAAOA,GACH,IAAK,QACDU,QACA,MACJ,IAAK,OACkB,WAAfhB,WACAgB,QAEAE,YAEJ,MACJ,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,MACkB,WAAflB,aACAF,aAAeC,eACfA,eAAiBS,SAASP,aAC1BkB,WAEJtB,iBAAmBS,EACnBN,WAAa,WACb,MACJ,IAAK,SACD,GAAmB,aAAfA,WACA,OAEe,WAAfA,aACAD,eAAiBS,SAASP,cAE9BkB,UACAnB,WAAa,SACb,MACJ,QACIoB,MAAM,oBAAoBd,qBAItC,SAASU,QACLnB,sBAAmBwB,EACnBvB,aAAe,EACfC,eAAiB,EACjBC,WAAa,SACbC,YAAc,IAGlB,SAASiB,YAEDjB,YADe,WAAfD,YAA2BC,YAAYa,QAAU,EACnC,IAEAb,YAAYqB,MAAM,GAAG,GAI3C,SAASH,UACL,OAAQtB,kBACJ,IAAK,SACDC,aAAeyB,KAAKC,MAAM1B,aAAeC,gBACzC,MACJ,IAAK,WACDD,cAA8BC,eAC9B,MACJ,IAAK,WACDD,cAA8BC,eAC9B,MACJ,IAAK,MACDD,cAA8BC,eAC9B,MACJ,UAAKsB,EACDvB,aAAeC,eACf,MACJ,QAEI,YADAqB,MAAM,oBAAoBvB,mCAIlCI,YAAcH,aAAa2B,WAK/B,SAASC,OACLvB,SAASC,cAAc,SAASuB,iBAAiB,SAAS,SAASC,GAClC,WAAzBA,EAAMC,OAAOC,SACbzB,cAAcuB,EAAMC,OAAOE,UAKvCL","sources":["src/calculator.js"],"sourcesContent":["// Variables used to store calculator state\n\nlet selectedOperator;\nlet runningTotal = 0;\nlet currentOperand = 0;\nlet lastAction = 'equals'; // number, operator, equals\n\nlet outputValue = '';\n\n// HTML element constants\n\nconst output = document.querySelector('.output');\n\n// IO functions\n\nfunction buttonClicked(inputValue) {\n    if (isNaN(parseInt(inputValue))) {\n        handleOperator(inputValue);\n    } else {\n        handleNumber(inputValue);\n    }\n    \n    writeOutput();\n    console.log(`State after \"${inputValue}\": operator: ${selectedOperator}, total: ${runningTotal}, operand: ${currentOperand}, last action: ${lastAction}`);\n}\n\nfunction writeOutput() {\n    if (outputValue.length > 13) {\n        if (lastAction === 'number') {\n            outputValue = outputValue.substr(0,13);\n        } else {\n            clear();\n            outputValue = 'ERROR';\n        }\n    }\n    \n    output.innerText = outputValue;\n}\n\n// Calculator functions\n\nfunction handleNumber(inputValue) {\n    switch (lastAction) {\n        case 'number':\n            if (outputValue === '0') {\n                outputValue = inputValue;\n            } else {\n                outputValue += inputValue;\n            }\n            break;\n        case 'operator':\n            outputValue = inputValue;\n            break;\n        case 'equals':\n            clear();\n            outputValue = inputValue;\n            break;\n    }\n\n    lastAction = 'number';\n}\n\nfunction handleOperator(inputValue) {\n    switch(inputValue) {\n        case 'clear':\n            clear();\n            break;\n        case 'back':\n            if (lastAction === 'equals') {\n                clear();\n            } else {\n                backspace();\n            }\n            break;\n        case 'divide':\n        case 'multiply':\n        case 'subtract':\n        case 'add':\n            if (lastAction === 'number') {\n                runningTotal = currentOperand;\n                currentOperand = parseInt(outputValue);\n                execute();\n            }\n            selectedOperator = inputValue;\n            lastAction = 'operator';\n            break;\n        case 'equals':\n            if (lastAction === 'operator') {\n                return;\n            }\n            if (lastAction === 'number') {\n                currentOperand = parseInt(outputValue);\n            }\n            execute();\n            lastAction = 'equals';\n            break;\n        default:\n            alert(`Error: operator \"${inputValue}\" is not valid.`);\n    }\n}\n\nfunction clear() {\n    selectedOperator = undefined;\n    runningTotal = 0;\n    currentOperand = 0;\n    lastAction = 'equals';\n    outputValue = '0';\n}\n\nfunction backspace() {\n    if (lastAction !== 'number' || outputValue.length <= 1) {\n        outputValue = '0';\n    } else {\n        outputValue = outputValue.slice(0, -1);\n    }\n}\n\nfunction execute() {\n    switch (selectedOperator) {\n        case 'divide':\n            runningTotal = Math.floor(runningTotal / currentOperand);\n            break;\n        case 'multiply':\n            runningTotal = runningTotal * currentOperand;\n            break;\n        case 'subtract':\n            runningTotal = runningTotal - currentOperand;\n            break;\n        case 'add':\n            runningTotal = runningTotal + currentOperand;\n            break;\n        case undefined:\n            runningTotal = currentOperand;\n            break;\n        default:\n            alert(`Error: operator \"${selectedOperator}\" is not valid.`);\n            return;\n    }\n\n    outputValue = runningTotal.toString();\n}\n\n// Init\n\nfunction init() {\n    document.querySelector('.calc').addEventListener('click', function(event) {\n        if (event.target.tagName === 'BUTTON') {\n            buttonClicked(event.target.value);\n        }\n    });\n};\n\ninit();"],"names":["selectedOperator","runningTotal","currentOperand","lastAction","outputValue","output","document","querySelector","buttonClicked","inputValue","isNaN","parseInt","handleOperator","handleNumber","writeOutput","console","log","length","substr","clear","innerText","backspace","execute","alert","undefined","slice","Math","floor","toString","init","addEventListener","event","target","tagName","value"],"version":3,"file":"index.e62db03e.js.map"}