{"mappings":"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","sources":["src/button.js","src/calculator.js","node_modules/decimal.js/decimal.js"],"sourcesContent":["// Enum object for button tag values\nexport const Button = Object.freeze({\n  // Operators\n  ADD: \"add\",\n  SUBTRACT: \"subtract\",\n  MULTIPLY: \"multiply\",\n  DIVIDE: \"divide\",\n  // Other buttons\n  CLEAR: \"clear\",\n  BACKSPACE: \"back\",\n  EQUALS: \"equals\",\n  DECIMAL: \"decimal\",\n\n  isOperator(value) {\n    return [this.ADD, this.SUBTRACT, this.MULTIPLY, this.DIVIDE].includes(\n      value\n    );\n  },\n\n  isNumber(value) {\n    return value.length == 1 && !isNaN(parseInt(value));\n  },\n\n  isInput(value) {\n    return (\n      [this.BACKSPACE, this.DECIMAL].includes(value) || this.isNumber(value)\n    );\n  },\n});\n","import { Button } from \"./button\";\nimport { Decimal } from \"decimal.js\";\n\n// Variables used to store calculator state\n\nlet selectedOperator;\nlet runningTotal = new Decimal(0);\nlet currentOperand = new Decimal(0);\nlet lastAction = Button.EQUALS;\n\nlet outputValue = \"0\";\n\n// HTML element constants\n\nconst output = document.querySelector(\".output\");\n\n// IO functions\n\nfunction writeOutput() {\n  if (outputValue.length > 13) {\n    if (Button.isInput(lastAction)) {\n      outputValue = outputValue.substr(0, 13);\n    } else {\n      clear();\n      outputValue = \"ERROR\";\n    }\n  }\n\n  output.innerText = outputValue;\n}\n\n// Calculator functions\n\nfunction handleNumber(inputValue) {\n  if (Button.isInput(lastAction)) {\n    if (outputValue === \"0\") {\n      outputValue = inputValue;\n    } else {\n      outputValue += inputValue;\n    }\n  } else if (Button.isOperator(lastAction)) {\n    outputValue = inputValue;\n  } else {\n    clear();\n    outputValue = inputValue;\n  }\n}\n\nfunction handleOperator(inputValue) {\n  if (Button.isInput(lastAction)) {\n    runningTotal = currentOperand;\n    currentOperand = new Decimal(outputValue);\n    execute();\n  }\n  selectedOperator = inputValue;\n}\n\nfunction clear() {\n  selectedOperator = undefined;\n  runningTotal = new Decimal(0);\n  currentOperand = new Decimal(0);\n  outputValue = \"0\";\n}\n\nfunction backspace() {\n  if (lastAction == Button.EQUALS) {\n    clear();\n  } else if (!Button.isInput(lastAction) || outputValue.length <= 1) {\n    outputValue = \"0\";\n  } else {\n    outputValue = outputValue.slice(0, -1);\n  }\n}\n\nfunction equals() {\n  if (Button.isOperator(lastAction)) {\n    return;\n  }\n  if (Button.isInput(lastAction)) {\n    currentOperand = new Decimal(outputValue);\n  }\n  execute();\n}\n\nfunction execute() {\n  switch (selectedOperator) {\n    case Button.DIVIDE:\n      runningTotal = runningTotal.dividedBy(currentOperand);\n      break;\n    case Button.MULTIPLY:\n      runningTotal = runningTotal.times(currentOperand);\n      break;\n    case Button.SUBTRACT:\n      runningTotal = runningTotal.minus(currentOperand);\n      break;\n    case Button.ADD:\n      runningTotal = runningTotal.plus(currentOperand);\n      break;\n    case undefined:\n      runningTotal = currentOperand;\n      break;\n    default:\n      alert(`Error: operator \"${selectedOperator}\" is not valid.`);\n      return;\n  }\n\n  outputValue = runningTotal.toString();\n}\n\n// Init\n\nfunction init() {\n  document.querySelector(\".calc\").addEventListener(\"click\", function (event) {\n    if (event.target.tagName === \"BUTTON\") {\n      buttonClicked(event.target.value);\n    }\n  });\n}\n\ninit();\n\nfunction buttonClicked(buttonValue) {\n  inputHandler(buttonValue);\n  writeOutput();\n  console.log(\n    `State after \"${buttonValue}\": operator: ${selectedOperator}, total: ${runningTotal.toString()}, operand: ${currentOperand.toString()}, last action: ${lastAction}`\n  );\n}\n\nfunction inputHandler(buttonValue) {\n  if (Button.isNumber(buttonValue)) {\n    handleNumber(buttonValue);\n  } else if (Button.isOperator(buttonValue)) {\n    handleOperator(buttonValue);\n  } else if (buttonValue == Button.CLEAR) {\n    clear();\n  } else if (buttonValue == Button.BACKSPACE) {\n    backspace();\n  } else if (buttonValue == Button.EQUALS) {\n    equals();\n  } else if (buttonValue == Button.DECIMAL) {\n    outputValue += \".\";\n  } else {\n    alert(`Error: operator \"${buttonValue}\" is not valid.`);\n    return;\n  }\n  lastAction = buttonValue;\n}\n",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.3.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"names":["$6411b0161a997a91$export$353f5b6fc5456de1","Object","freeze","ADD","SUBTRACT","MULTIPLY","DIVIDE","CLEAR","BACKSPACE","EQUALS","DECIMAL","isOperator","value","this","includes","isNumber","length","isNaN","parseInt","isInput","$9524bea046020db5$var$selectedOperator","globalScope","inexact","noConflict","quadrant","EXP_LIMIT","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LN10_PRECISION","LN10","PI_PRECISION","PI","toStringTag","digitsToString","d","i","k","ws","indexOfLastWord","str","w","getZeroString","checkInt32","min","max","Error","checkRoundingDigits","rm","repeating","di","r","rd","ceil","convertBase","baseIn","baseOut","strL","arrL","arr","NUMERALS","indexOf","charAt","j","reverse","P","abs","x","constructor","s","finalise","e","clamp","Ctor","NaN","cmp","y","ydL","xd","yd","xs","ys","xdL","cosine","cos","pr","sd","len","isZero","tinyPow","toString","taylorSeries","times","cos2x","minus","plus","toLessThanHalfPi","neg","cbrt","m","n","rep","t","t3","t3plusx","isFinite","toExponential","slice","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","sinh","sqrt","sinh2_x","d5","d16","d20","tanh","acos","halfPi","isNeg","getPi","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","asin","atan","inverseTangent","px","x2","isInteger","isInt","lt","lessThanOrEqualTo","log","base","isBase10","denominator","inf","num","arg","naturalLogarithm","getLn10","sub","xe","xLTy","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","add","carry","unshift","z","getPrecision","sin","mul","rL","toDP","MAX_DIGITS","finiteToString","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toStringBinary","yn","intPow","toPrecision","toSD","trunc","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","subtract","isTruncated","roundUp","xdi","out","digits","isExp","nonFiniteToString","zs","truncate","args","ltgt","guard","sum","c","c0","numerator","x1","$9524bea046020db5$var$runningTotal","$943942fd9e8a916e$exports","Decimal","$9524bea046020db5$var$currentOperand","$9524bea046020db5$var$lastAction","$9524bea046020db5$var$outputValue","$9524bea046020db5$var$output","document","querySelector","$9524bea046020db5$var$clear","undefined","$9524bea046020db5$var$execute","alert","addEventListener","event","buttonValue","target","tagName","inputValue","$9524bea046020db5$var$handleOperator","$9524bea046020db5$var$inputHandler","substr","innerText","console"],"version":3,"file":"index.d2af2ea3.js.map"}